---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
theme: lux
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)
```

```{r}

fluH7N9_china_2013 <- fluH7N9_china_2013

#calculate total flu cases
total_flu_cases <- fluH7N9_china_2013 %>% 
                    distinct() %>% 
                    nrow()

#calculate total hospitalization
total_hospitalizations <- fluH7N9_china_2013 %>%
                          filter(!is.na(date_of_hospitalisation)) %>% 
  nrow()

#calculate total deaths
total_deaths <- fluH7N9_china_2013 %>% 
  filter(outcome == "Death") %>% 
  nrow()

```

```{r}
province_summary <- fluH7N9_china_2013 %>%
  group_by(province) %>%
  summarise(total_cases = n()) %>%
  arrange(desc(total_cases)) %>%
  ggplot(aes(x = total_cases,
             y = reorder(province, total_cases),
             fill = province)) +
  geom_col(fill = "#325aa8") +  # Set fill color to blue
  labs(x = "Number of Cases",
       y = "Province") +
  theme(legend.position = "none")
  
#interactive ggplot of total cases per province
  
province_summary_ggplotly <- ggplotly(province_summary) 

### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")

```

# HOME 

## Row 1
```{r}
#value box for total cases
value_box(
  title = "Total Cases",
  value = total_flu_cases,
  showcase = bsicons::bs_icon("virus2"),
  theme = value_box_theme(bg = "#325aa8"))
```

```{r}
#value box for total hospitalization
value_box(
  title = "Total Hospitalizations",
  value = total_hospitalizations,
  showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#0e192e"))
```

```{r}
#value box total deaths
value_box(
  title = "Total Deaths",
  value = total_deaths,
  showcase = bsicons::bs_icon("file-earmark-medical"),
  theme = value_box_theme(bg = "#5d749e"))
```
## Row 2 {height = 70%}

### {width = 70%}

```{r title = "Number of Cases by Province"}

province_summary_ggplotly

```

### width {30%}

```{r title = "Map of Provinces by Number of Cases"}
china_map_plot_ggplotly
```
# DOWNLOAD DATA

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(htmltools, reactable)

htmltools::browsable(
  tagList(
    reactable(fluH7N9_china_2013, 
              elementId = "fluH7N9_china_2013-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('fluH7N9_china_2013-table')")
  )
)

```